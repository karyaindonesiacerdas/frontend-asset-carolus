import React, { forwardRef } from "react";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useCallback, useState } from "react";
import { useDispatch } from "react-redux";
import { setUser } from "../store/actions";
import styles from "../styles/Home.module.css";
import { HttpRequest, HttpRequestExternal } from "../utils/http";
import { useForm } from "react-hook-form";
import Button from "../components/Button";
import { EyeIcon, EyeOffIcon } from "@heroicons/react/solid";
import Input from "../components/Input";
import toast from "react-hot-toast";

const notifyDel = () => toast.success("Successfully Delete!");
const notifyDelDel = () => toast.error("Failed Delete!");

const notify = (a) => toast.success("Successfully! " + a);
const notifyGagal = (a) => toast.error("Failed! " + a);

export default function Login() {
  const logo = process.env.logo ?? "/ptpi/main-logo.png";
  const router = useRouter();
  const dispatch = useDispatch();

  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm();
  const onSubmit = async (value) => {
    setIsLoading(true);
    const data = {
      username: value.email,
      password: value.password,
    };

    // // console.log(data)
    HttpRequest.login(data).then((response) => {
      // // console.log("res", response)
      if (response.data.code == 404) {
        notifyGagal(response.data.message);
        setIsLoading(false);
      } else {
        dispatch(setUser(response.data.data));
        setIsLoading(false);
        setTimeout(() => {
          notify(response.data.message);
          getMe(response.data.data);
        }, 500);
      }
    });
  };

  const getMe = async (user) => {
    let userData = await HttpRequestExternal.me();
    let data = { ...user };
    data.user = userData;
    setIsLoading(false);
    dispatch(setUser(data));
    router.push({
      pathname: "/",
    });
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="flex flex-col justify-center min-h-screen py-12 bg-primary-100 dark:bg-gray-800 sm:px-6 lg:px-8">
          <div className="sm:mx-auto sm:w-full sm:max-w-md">
            <div className="px-4 pt-8 pb-10 bg-white shadow dark:bg-gray-900 sm:rounded-lg sm:px-10">
              <div className="sm:mx-auto sm:w-full sm:max-w-md">
                <a
                  href={process.env.REACT_APP_WEBSITE_URL}
                  className="flex justify-center"
                >
                  <img
                    className="object-contain h-28"
                    src={logo}
                    alt="Logo Asha IVF"
                  />
                </a>
                <h2 className="mt-6 text-3xl font-extrabold text-center text-gray-900 dark:text-white">
                  Sign in to your account
                </h2>
              </div>
              <form
                className="mt-8 space-y-6 accent-primary"
                onSubmit={handleSubmit(onSubmit)}
              >
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Email Address
                </label>
                <div className="mt-1">
                  <Input
                    errorMessage={errors?.email?.message}
                    {...register("email", { required: "Email is required" })}
                  />
                </div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Password
                </label>
                <div className="mt-1">
                  <Input
                    type="password"
                    errorMessage={errors?.password?.message}
                    {...register("password", {
                      required: "Password is required",
                    })}
                  />
                </div>
                <Button
                  type="submit"
                  isLoading={isLoading}
                  shadow="small"
                  size="large"
                  rounded="full"
                  className="w-full text-base"
                >
                  Sign in
                </Button>
              </form>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
